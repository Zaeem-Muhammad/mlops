# name: Deploying ML Model to Azure Web App

# on:
#   push:
#     branches:
#       - main
#   workflow_dispatch:

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v4

#       - name: Set up Python version
#         uses: actions/setup-python@v5
#         with:
#           python-version: "3.10"

#       - name: Create and start virtual environment
#         run: |
#           python -m venv venv
#           source venv/bin/activate

#       - name: Install dependencies
#         run: pip install -r requirements.txt

#       # Optional: Add step to run tests here (PyTest, Django test suites, etc.)

#       - name: Zip artifact for deployment
#         run: zip release.zip ./* -r

#       - name: Upload artifact for deployment jobs
#         uses: actions/upload-artifact@v4
#         with:
#           name: python-app
#           path: |
#             release.zip
#             !venv/

#   deploy:
#     runs-on: ubuntu-latest
#     needs: build
#     environment:
#       name: "Production"
#       url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
#     permissions:
#       id-token: write #This is required for requesting the JWT

#     steps:
#       - name: Download artifact from build job
#         uses: actions/download-artifact@v4
#         with:
#           name: python-app

#       - name: Unzip artifact for deployment
#         run: unzip release.zip

#       - name: Login to Azure
#         uses: azure/login@v2
#         with:
#           client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_E655A899BF3E48FDB09807009DC7D053 }}
#           tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_620A8574435D4F9FB92D92418C4602C1 }}
#           subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_73461915A1F0407DAAA08F801B2EEF18 }}

#       - name: "Deploy to Azure Web App"
#         uses: azure/webapps-deploy@v3
#         id: deploy-to-webapp
#         with:
#           app-name: "MLOPsA4"
#           slot-name: "Production"

name: Deploying ML Model to Azure Web App

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Create and start virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate

      - name: Install dependencies
        run: pip install -r requirements.txt

      # Optional: Add step to run tests here (PyTest, Django test suites, etc.)

      - name: Zip artifact for deployment
        run: zip release.zip ./* -r

      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: |
            release.zip
            !venv/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: "Production"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write #This is required for requesting the JWT

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app

      - name: Unzip artifact for deployment
        run: unzip release.zip

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_E655A899BF3E48FDB09807009DC7D053 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_620A8574435D4F9FB92D92418C4602C1 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_73461915A1F0407DAAA08F801B2EEF18 }}

      - name: Wait for SCM container to stabilize
        run: sleep 60 # Add a 60-second delay to ensure SCM service is stable

      - name: "Deploy to Azure Web App"
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: "MLOPsA4"
          slot-name: "Production"
          retries: 3 # Retry if failure occurs
          retry-delay: 30 # Delay between retries in seconds
